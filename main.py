import logging
import asyncio
import re
import json
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.filters import Command
from aiogram import F
from aiogram.utils.keyboard import ReplyKeyboardBuilder

API_TOKEN = '8132728411:AAGxK5QFdkBaUHRjs-Ip3XkGncyTbHl1bco'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

accounts = {}
archives = {}
pending_deletion = {}

def load_data():
    global accounts, archives
    try:
        with open("accounts.json", "r", encoding="utf-8") as f:
            accounts.update(json.load(f))
    except: pass
    try:
        with open("archives.json", "r", encoding="utf-8") as f:
            archives.update(json.load(f))
    except: pass

def save_data():
    with open("accounts.json", "w", encoding="utf-8") as f:
        json.dump(accounts, f, ensure_ascii=False, indent=2)
    with open("archives.json", "w", encoding="utf-8") as f:
        json.dump(archives, f, ensure_ascii=False, indent=2)

def main_menu():
    kb = ReplyKeyboardBuilder()
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å")
    kb.button(text="üìÑ –†–µ–∫–≤–∏–∑–∏—Ç—ã")
    kb.button(text="üì¶ –ê—Ä—Ö–∏–≤")
    kb.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å")
    return kb.as_markup(resize_keyboard=True)

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

@dp.message()
async def handle_all(message: Message):
    user_id = message.from_user.id
    text = message.text or message.caption or ""

    if text.startswith("‚ûï"):
        await message.answer("–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–§–ò–û\n–¢–µ–ª–µ—Ñ–æ–Ω\n–ö–∞—Ä—Ç–∞\n\n–î–∞–Ω–Ω—ã–µ –¥–ª—è IBAN –∏ —Ç.–¥.\n\n–õ–∏–º–∏—Ç")
        return

    if text.startswith("üìÑ"):
        if not accounts:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.")
            return
        response = ""
        for name, acc in accounts.items():
            response += f"<b>{name}</b>\n–õ–∏–º–∏—Ç: {acc['–æ—Å—Ç–∞—Ç–æ–∫']} –≥—Ä–Ω\n{acc['—Ä–µ–∫–≤–∏–∑–∏—Ç—ã']}\n"
            response += "______________________________________\n\n"
        await message.answer(response.strip(), parse_mode=ParseMode.HTML)
        return

    if text.startswith("üì¶"):
        if not archives:
            await message.answer("–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç.")
            return
        response = "üì¶ –ê—Ä—Ö–∏–≤–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n\n"
        for name, acc in archives.items():
            response += f"<b>{name}</b>\n{acc['—Ä–µ–∫–≤–∏–∑–∏—Ç—ã']}\n\n"
            response += "______________________________________\n\n"
        await message.answer(response.strip(), parse_mode=ParseMode.HTML)
        return

    if text.startswith("‚ùå") or text.startswith("/—É–¥–∞–ª–∏—Ç—å"):
        parts = text.strip().split(maxsplit=1)
        if len(parts) == 2:
            name = parts[1]
            if name in accounts:
                pending_deletion[message.from_user.id] = name
                await message.answer("üìé –û—Ç–ø—Ä–∞–≤—å –≤—ã–ø–∏—Å–∫—É (—Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç), —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ.")
            else:
                await message.answer("–¢–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç.")
        else:
            await message.answer("–ü—Ä–∏–º–µ—Ä: /—É–¥–∞–ª–∏—Ç—å –ó–∞—î—Ü—å")
        return

    if "‚è≥" in text:
        try:
            amount_match = re.search(r"‚è≥\s*([\d.]+)", text)
            amount = float(amount_match.group(1)) if amount_match else None
            all_possible = re.findall(r"\d{16}|\d{4}\s\d{4}\s\d{4}\s\d{4}", text)
            candidates = [c.replace(" ", "") for c in all_possible if c.replace(" ", "").isdigit()]
            card_number = next((c for c in candidates if c.startswith(('4', '5')) and len(c) == 16), None)
            if not amount or not card_number:
                await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã.")
                return
            for name, acc in accounts.items():
                all_cards_raw = re.findall(r"\d{16}|\d{4} \d{4} \d{4} \d{4}", acc["—Ä–µ–∫–≤–∏–∑–∏—Ç—ã"])
                all_cards_cleaned = [c.replace(" ", "") for c in all_cards_raw if c.replace(" ", "").isdigit()]
                filtered_cards = [c for c in all_cards_cleaned if len(c) == 16 and c.startswith(("4", "5"))]
                print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç—ã {card_number} —Å—Ä–µ–¥–∏: {filtered_cards} ({name})")
                if card_number in filtered_cards:
                    accounts[name]["–æ—Å—Ç–∞—Ç–æ–∫"] -= amount
                    save_data()
                    await message.answer(f"‚úÖ {amount} –≥—Ä–Ω –≤—ã—á—Ç–µ–Ω–æ —Å –∫–∞—Ä—Ç—ã {card_number} ({name}). –ù–æ–≤—ã–π –ª–∏–º–∏—Ç: {accounts[name]['–æ—Å—Ç–∞—Ç–æ–∫']} –≥—Ä–Ω.")
                    return
            await message.answer("‚ÑπÔ∏è –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏.")
        return

    if user_id in pending_deletion:
        name = pending_deletion.pop(user_id)
        if name in accounts:
            archives[name] = accounts.pop(name)
            save_data()
            await message.answer(f"‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã {name} —É–¥–∞–ª–µ–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∞—Ä—Ö–∏–≤.")
        return

    lines = text.split("\n")
    if len(lines) >= 6:
        try:
            name = lines[0].strip()
            phone = lines[1].strip()
            card = lines[2].strip()
            limit = int(lines[-1].strip())
            block = "\n".join(lines[3:-1]).strip()
            requisites = f"{name}\n{phone}\n{card}\n\n{block}"
            accounts[name] = {
                "–ª–∏–º–∏—Ç": limit,
                "–æ—Å—Ç–∞—Ç–æ–∫": limit,
                "—Ä–µ–∫–≤–∏–∑–∏—Ç—ã": requisites
            }
            save_data()
            await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω {name} —Å –ª–∏–º–∏—Ç–æ–º {limit}")
        except:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç.")
        return

    if text.startswith("/–≤—ã—á–µ—Å—Ç—å"):
        try:
            _, name, amount = text.split()
            amount = float(amount)
            if name in accounts:
                accounts[name]["–æ—Å—Ç–∞—Ç–æ–∫"] -= amount
                save_data()
                await message.answer(f"üí∏ –£ {name} —Ç–µ–ø–µ—Ä—å {accounts[name]['–æ—Å—Ç–∞—Ç–æ–∫']} –≥—Ä–Ω.")
            else:
                await message.answer("–¢–∞–∫–æ–≥–æ –∏–º–µ–Ω–∏ –Ω–µ—Ç.")
        except:
            await message.answer("–û—à–∏–±–∫–∞. –ü—Ä–∏–º–µ—Ä: /–≤—ã—á–µ—Å—Ç—å –ó–∞—î—Ü—å 30000")

@dp.message(F.document)
async def handle_file(message: Message):
    user_id = message.from_user.id
    if user_id in pending_deletion:
        name = pending_deletion.pop(user_id)
        if name in accounts:
            archives[name] = accounts.pop(name)
            save_data()
            await message.answer(f"üìÅ –í—ã–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞. {name} —É–¥–∞–ª—ë–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞—Ä—Ö–∏–≤.")

async def main():
    load_data()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
